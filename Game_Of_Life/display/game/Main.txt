//import GameOfLife.display.Game_Frame;
//Game_Frame frame = new Game_Frame(); 


import javax.swing.JFrame;
import javax.swing.JPanel;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.util.Random;
import java.util.random.*;
//import GameOfLife.game.Draw_Frame;

public class Main {

    static int[][] grid;
    static int rows;
    static int cols;
    static int resolution = 20;
    static int width = 600;
    static int height = 400;
    static int[][] gameArray;
    public static void main(String[] args) {

        cols = height / resolution; 
        rows = width / resolution; 
        
        grid = make2DArray();
        
        
        JFrame frame = new JFrame();
        frame.setBounds(10, 10, width, height);
        frame. setUndecorated(true);
        frame.setBackground(Color.gray);
        
        JPanel panel = new JPanel(){
            public static int state;
            @Override
            public void paint(Graphics g) {
                Graphics2D g2 = (Graphics2D)g.create();
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);        // smooths rendering
                
                for(int i = 0; i < rows; i++){
                    for(int j = 0; j < cols; j++){
                        if(gameArray[i][j] == 0){
                            g2.setColor(Color.white);
                        }
                        else{
                            g2.setColor(Color.black);
                        }
                        g2.fillRect(i*resolution + 2, j*resolution + 2, resolution - 4, resolution - 4);
                    }
                }
            } 
        };
        frame.add(panel);
        frame.setVisible(true);
        while(true)

    }
    public void updateNewGrid(){
        
        gameArray = new int[rows][cols];

        for(int i = 0; i < rows; i++){
            for(int j = 0; j < cols; j++){
                int state = grid[i][j];
                int neigh = getNeiborsCount(i, j);

                if(neigh < 2){
                    if(state == 1){
                        
                    }
                }                
            }
        }
    }
    // count number of neighbors taking edge into account
    public int getNeiborsCount(int i, int j){
        int numOfNeighbours = 0;
        
        int startPosX =     i - 1 < 0            ? i : i - 1;
        int startPosY =     j - 1 < 0            ? j : j - 1;
        int endPosX   =     i + 1 > rows - 1    ? i : i + 1;
        int endPosY   =     j + 1 > cols - 1    ? j : j + 1;

        for(int x = startPosX; x <= endPosX; x++){
            for(int y = startPosY; y <= endPosY; y++){
                if(grid[x][y] == 1){
                    numOfNeighbours++;
                    System.out.println("1");
                }
                else{
                    System.out.println("2");
                }
            }
        }
        if(grid[i][j] == 1){
            return numOfNeighbours - 1;
        }
        else{
            return numOfNeighbours;
        }
    }

    public static int[][] make2DArray(){
        gameArray = new int[rows][cols]; 
        Random random = new Random();
        
        for(int i = 0; i < rows; i++){
            for(int j = 0; j < cols; j++){
                gameArray[i][j] = random.nextInt(2);
            }
        }
        return gameArray;
    }
}   


