package Word_search_2;
// Given an m x n board of characters and a list of strings words, return all words on the board.

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

// Each word must be constructed from letters of sequentially adjacent cells,
// where adjacent cells are horizontally or vertically neighboring. 
// The same letter cell may not be used more than once in a word.

 
// Example 1:

// Input: board = [["o","a","a","n"],["e","t","a","e"],["i","h","k","r"],["i","f","l","v"]], words = ["oath","pea","eat","rain"]
// Output: ["eat","oath"]


// Example 2:

// Input: board = [["a","b"],["c","d"]], words = ["abcb"]
// Output: []
 

// Constraints:

// m == board.length
// n == board[i].length
// 1 <= m, n <= 12
// board[i][j] is a lowercase English letter.
// 1 <= words.length <= 3 * 104
// 1 <= words[i].length <= 10
// words[i] consists of lowercase English letters.
// All the strings of words are unique.

public class Solution {
    
    public static void main(String[] args) {
        
        char[][] board = {{'o','a','a','n'},
                          {'e','t','a','e'},
                          {'i','h','k','r'},
                          {'i','f','l','v'}};

        String[] words = {"oath","pea","eat","rain"};
        Set<char[]> set = new HashSet<>();
        
    }
    Set<Integer> set = new HashSet<>();
    static char[][] board;
    static char[] word;
    static List<String> wordSearch(char[][] gboard, String[] words){
        board = gboard;
        
        int rows = board.length; 
        int cols = board[0].length;
        Set<char[]> set = new HashSet<>();
        for(int i = 0; i < words.length; i++){
            set.add(words[i].toCharArray());
        }   
        List<String> result = new ArrayList<>();
        for (int i = 0; i < rows ; i++) {
            for (int j = 0; j < cols; j++) {
                for(Iterator<char[]> iterator = set.iterator(); iterator.hasNext();){
                    word = iterator.next();
                    if(dfs(0,i,j)){
                        result.add(String.valueOf(word));
                        iterator.remove();   
                    }
                }
            }
        }
        return result;  
    }
    static boolean dfs(int index, int i,int j) {
        if(index == word.length){
            return true;
        }
        if(i < 0 || j < 0 ||
        i > board.length-1 || j > board[0].length -1 ||
        board[i][j] != word[index] || board[i][j] == '!')
           return false; 
        char curr = board[i][j];
        board[i][j] = '!';

        boolean result;
        result = (
            dfs(index+1,i+1,j) || // top
            dfs(index+1,i,j+1) || // right 
            dfs(index+1,i-1,j) || // bot 
            dfs(index+1,i,j-1)    // left 
        );
        board[i][j] = curr;
        return result; 
    }

     
    static class Trie{
        static class TrieNode{
            boolean isLast = false;
            Map<Character, TrieNode> map = new HashMap<>();
        }
        static TrieNode root = new TrieNode(); 
        static void insert(String str){
            TrieNode curr = root;
            char[] c = str.toCharArray();
            for (int i = 0; i < c.length; i++) {
                curr.map.putIfAbsent(c[i], new TrieNode());
                curr = curr.map.get(c[i]);
            }
            curr.isLast = true;
        }
        static boolean search(String str){
            TrieNode curr = root;
            char[] c = str.toCharArray();
            for (int i = 0; i < c.length; i++) {
                if(!curr.map.containsKey(c[i]))
                    return false;
                curr = curr.map.get(c[i]);
            }
            return curr.isLast;
        }

        static boolean startsWith(String str){
            TrieNode curr = root;
            char[] c = str.toCharArray();
            for (int i = 0; i < c.length; i++) {
                if(!curr.map.containsKey(c[i]))
                    return false;
                curr = curr.map.get(c[i]);
            }
            return true;
        }
    }
}
